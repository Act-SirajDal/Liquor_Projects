from concurrent.futures import ThreadPoolExecutor
from googletrans import Translator
import numpy as np



def translate_chunk(chunk, columns):
    """Translate a chunk of the dataframe with progress tracking and error handling."""
    translator = Translator()

    for col in columns:
        if col in chunk.columns:
            print(f"Translating chunk for column: {col}...")
            unique_values = chunk[col].dropna().unique()
            translation_dict = {}
            for value in unique_values:
                try:
                    if isinstance(value, str) and value.strip().lower() == 'na':
                        translation_dict[value] = 'Na'
                    elif isinstance(value, str) and value.strip() != '':
                        translation_dict[value] = translator.translate(value).text
                        print(f"Translated: '{value}' -> '{translation_dict[value]}'")
                except Exception as e:
                    print(f"Error translating '{value}' in chunk: {e}")
                    translation_dict[value] = value  # Keep original value if error occurs

            chunk[col] = chunk[col].map(translation_dict).fillna(chunk[col])
    return chunk


def translate_column_parallel(df, columns, n_workers=4):
    """Helper function to translate specified columns in the dataframe using parallel processing."""
    chunks = np.array_split(df, n_workers)
    print(f"Dataframe split into {n_workers} chunks for parallel processing.")

    with ThreadPoolExecutor(max_workers=n_workers) as executor:
        results = list(executor.map(lambda chunk: translate_chunk(chunk, columns), chunks))

    print("All chunks processed.")
    return pd.concat(results)